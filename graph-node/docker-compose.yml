services:
  solana-validator:
    image: solana-test-validator:v1.18.15
    ports:
      - '1024:1024' # Gossip port
      - '1027:1027' # TPU port
      - '8899:8899' # JSON RPC port
      - '8900:8900' # WebSocket PubSub port
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "-H", "Content-Type: application/json", "http://solana-validator:8899"]
      interval: 5s
      timeout: 10s
      start_period: 15s
      start_interval: 5s
      retries: 10
    command:
    - solana-test-validator
    - --clone-upgradeable-program
    - metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s
    - --url
    - https://api.mainnet-beta.solana.com
    - --ledger
    - /data

  firehose:
    image: ghcr.io/streamingfast/firehose-solana:v1.0.3
    depends_on:
      solana-validator:
        condition: service_healthy
    restart: on-failure
    ports:
      - '9000:9000' # Substreams tier 1 gRPC port
    entrypoint:
    - /app/firecore
    command:
    - start
    - reader-node,merger,relayer,firehose,substreams-tier1,substreams-tier2
    - --config-file=
    - --log-format=text
    - --log-to-file=false
    - --common-first-streamable-block=1
    - --reader-node-path=firesol
    - --reader-node-arguments=fetch rpc http://solana-validator:8899 1 --state-dir=./firehose-data/reader/data
    - --substreams-tier1-block-type=sf.solana.type.v1.Block
    - --substreams-tier1-grpc-listen-addr=:9000
  graph-node:
    container_name: graph-node
    image: graphprotocol/graph-node:canary-substreams-index-module-e532c3135
    ports:
      - '8000:8000'
      - '8001:8001'
      - '8020:8020'
      - '8030:8030'
      - '8040:8040'
    depends_on:
      - ipfs
      - postgres
      - solana-validator
      - firehose
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      GRAPH_NODE_CONFIG: /etc/graph-node/config.toml
      SUBSTREAMS_ENDPOINT: http://firehose:9000
      SUBSTREAMS_API_TOKEN: $SUBSTREAMS_API_TOKEN
      postgres_host: postgres
      postgres_user: graph-node
      postgres_pass: let-me-in
      postgres_db: graph-node
      ipfs: 'ipfs:5001'
      ethereum: 'mainnet:http://host.docker.internal:8545'
      GRAPH_LOG: debug
    volumes: 
      - $CONFIG:/etc/graph-node/config.toml
  ipfs:
    container_name: ipfs-gn
    image: ipfs/kubo:v0.14.0
    ports:
      - "5001:5001"
      - "5002:8080"
    volumes:
      - ./data/ipfs:/data/ipfs
      - ./data/ipfs-export:/export
  postgres:
    container_name: postgres-gn
    image: postgres:14
    ports:
      - "5432:5432"
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    #command: ["postgres", "-cshared_preload_libraries=pg_stat_statements", "-clog_statement=all"]
    environment:
      POSTGRES_USER: graph-node
      POSTGRES_PASSWORD: let-me-in
      POSTGRES_DB: graph-node
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5432"]
      interval: 30s
      timeout: 10s
      retries: 15
  pgweb:
    container_name: pgweb-gn
    image: sosedoff/pgweb:0.11.12
    restart: on-failure
    ports:
      - "8081:8081"
    command: ["pgweb", "--bind=0.0.0.0", "--listen=8081", "--binary-codec=hex"]
    #command: ["pgweb", "--binary-codec=base58"]
    #command: ["pgweb", "--binary-codec=base64"]
    links:
      - postgres:postgres
    environment:
      - DATABASE_URL=postgres://graph-node:let-me-in@postgres:5432/graph-node?sslmode=disable
    depends_on:
      - postgres
